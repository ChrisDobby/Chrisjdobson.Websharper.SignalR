<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>WebSharper.Testing</name></assembly>
<members>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:WebSharper.Testing.Pervasives.SubtestBuilder.RunSubtest``2(Microsoft.FSharp.Core.FSharpFunc{WebSharper.Testing.Pervasives.QUnit.Asserter,Microsoft.FSharp.Core.FSharpChoice{``0,Microsoft.FSharp.Control.FSharpAsync{``0}}},Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{WebSharper.Testing.Pervasives.QUnit.Asserter,Microsoft.FSharp.Core.FSharpChoice{``1,Microsoft.FSharp.Control.FSharpAsync{``1}}}})">
<summary>
 Runs a sub-test.
</summary>
</member>
<member name="">

</member>
<member name="M:WebSharper.Testing.Pervasives.SubtestBuilder.RaisesMsgAsync``2(Microsoft.FSharp.Core.FSharpFunc{WebSharper.Testing.Pervasives.QUnit.Asserter,Microsoft.FSharp.Core.FSharpChoice{``1,Microsoft.FSharp.Control.FSharpAsync{``1}}},Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Control.FSharpAsync{``0}},System.String)">
<summary>
 Checks that an expression raises an exception.
</summary>
</member>
<member name="M:WebSharper.Testing.Pervasives.SubtestBuilder.RaisesMsg``2(Microsoft.FSharp.Core.FSharpFunc{WebSharper.Testing.Pervasives.QUnit.Asserter,Microsoft.FSharp.Core.FSharpChoice{``1,Microsoft.FSharp.Control.FSharpAsync{``1}}},Microsoft.FSharp.Core.FSharpFunc{``1,``0},System.String)">
<summary>
 Checks that an expression raises an exception.
</summary>
</member>
<member name="M:WebSharper.Testing.Pervasives.SubtestBuilder.RaisesAsync``2(Microsoft.FSharp.Core.FSharpFunc{WebSharper.Testing.Pervasives.QUnit.Asserter,Microsoft.FSharp.Core.FSharpChoice{``1,Microsoft.FSharp.Control.FSharpAsync{``1}}},Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Control.FSharpAsync{``0}})">
<summary>
 Checks that an expression raises an exception.
</summary>
</member>
<member name="M:WebSharper.Testing.Pervasives.SubtestBuilder.Raises``2(Microsoft.FSharp.Core.FSharpFunc{WebSharper.Testing.Pervasives.QUnit.Asserter,Microsoft.FSharp.Core.FSharpChoice{``1,Microsoft.FSharp.Control.FSharpAsync{``1}}},Microsoft.FSharp.Core.FSharpFunc{``1,``0})">
<summary>
 Checks that an expression raises an exception.
</summary>
</member>
<member name="M:WebSharper.Testing.Pervasives.SubtestBuilder.PropertyWithSample``3(Microsoft.FSharp.Core.FSharpFunc{WebSharper.Testing.Pervasives.QUnit.Asserter,Microsoft.FSharp.Core.FSharpChoice{``1,Microsoft.FSharp.Control.FSharpAsync{``1}}},Microsoft.FSharp.Core.FSharpFunc{``1,WebSharper.Testing.Random.Sample{``0}},Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{WebSharper.Testing.Pervasives.QUnit.Asserter,Microsoft.FSharp.Core.FSharpChoice{``2,Microsoft.FSharp.Control.FSharpAsync{``2}}}}})">
<summary>
 Runs a test for each element in a randomly generated set.
</summary>
</member>
<member name="M:WebSharper.Testing.Pervasives.SubtestBuilder.PropertyWith``3(Microsoft.FSharp.Core.FSharpFunc{WebSharper.Testing.Pervasives.QUnit.Asserter,Microsoft.FSharp.Core.FSharpChoice{``1,Microsoft.FSharp.Control.FSharpAsync{``1}}},Microsoft.FSharp.Core.FSharpFunc{``1,WebSharper.Testing.Random.Generator{``0}},Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{WebSharper.Testing.Pervasives.QUnit.Asserter,Microsoft.FSharp.Core.FSharpChoice{``2,Microsoft.FSharp.Control.FSharpAsync{``2}}}}})">
<summary>
 Runs a test for 100 occurrences of a random generator.
</summary>
</member>
<member name="M:WebSharper.Testing.Pervasives.SubtestBuilder.Property``3(Microsoft.FSharp.Core.FSharpFunc{WebSharper.Testing.Pervasives.QUnit.Asserter,Microsoft.FSharp.Core.FSharpChoice{``1,Microsoft.FSharp.Control.FSharpAsync{``1}}},Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{WebSharper.Testing.Pervasives.QUnit.Asserter,Microsoft.FSharp.Core.FSharpChoice{``2,Microsoft.FSharp.Control.FSharpAsync{``2}}}}})">
<summary>
 Runs a test for 100 random occurrences.
</summary>
</member>
<member name="M:WebSharper.Testing.Pervasives.SubtestBuilder.NotEqualMsgAsync``2(Microsoft.FSharp.Core.FSharpFunc{WebSharper.Testing.Pervasives.QUnit.Asserter,Microsoft.FSharp.Core.FSharpChoice{``1,Microsoft.FSharp.Control.FSharpAsync{``1}}},Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Control.FSharpAsync{``0}},Microsoft.FSharp.Core.FSharpFunc{``1,``0},System.String)">
<summary>
 Tests equality between two values using F# `=`.
</summary>
</member>
<member name="M:WebSharper.Testing.Pervasives.SubtestBuilder.NotEqualMsg``2(Microsoft.FSharp.Core.FSharpFunc{WebSharper.Testing.Pervasives.QUnit.Asserter,Microsoft.FSharp.Core.FSharpChoice{``1,Microsoft.FSharp.Control.FSharpAsync{``1}}},Microsoft.FSharp.Core.FSharpFunc{``1,``0},Microsoft.FSharp.Core.FSharpFunc{``1,``0},System.String)">
<summary>
 Tests equality between two values using F# `=`.
</summary>
</member>
<member name="M:WebSharper.Testing.Pervasives.SubtestBuilder.NotEqualAsync``2(Microsoft.FSharp.Core.FSharpFunc{WebSharper.Testing.Pervasives.QUnit.Asserter,Microsoft.FSharp.Core.FSharpChoice{``1,Microsoft.FSharp.Control.FSharpAsync{``1}}},Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Control.FSharpAsync{``0}},Microsoft.FSharp.Core.FSharpFunc{``1,``0})">
<summary>
 Tests equality between two values using F# `=`.
</summary>
</member>
<member name="M:WebSharper.Testing.Pervasives.SubtestBuilder.NotEqual``2(Microsoft.FSharp.Core.FSharpFunc{WebSharper.Testing.Pervasives.QUnit.Asserter,Microsoft.FSharp.Core.FSharpChoice{``1,Microsoft.FSharp.Control.FSharpAsync{``1}}},Microsoft.FSharp.Core.FSharpFunc{``1,``0},Microsoft.FSharp.Core.FSharpFunc{``1,``0})">
<summary>
 Tests equality between two values using F# `=`.
</summary>
</member>
<member name="M:WebSharper.Testing.Pervasives.SubtestBuilder.NotApproxEqualMsgAsync``2(Microsoft.FSharp.Core.FSharpFunc{WebSharper.Testing.Pervasives.QUnit.Asserter,Microsoft.FSharp.Core.FSharpChoice{``1,Microsoft.FSharp.Control.FSharpAsync{``1}}},Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Control.FSharpAsync{System.Double}},Microsoft.FSharp.Core.FSharpFunc{``1,System.Double},System.String)">
<summary>
 Tests approximate inequality between two floats.
</summary>
</member>
<member name="M:WebSharper.Testing.Pervasives.SubtestBuilder.NotApproxEqualMsg``2(Microsoft.FSharp.Core.FSharpFunc{WebSharper.Testing.Pervasives.QUnit.Asserter,Microsoft.FSharp.Core.FSharpChoice{``1,Microsoft.FSharp.Control.FSharpAsync{``1}}},Microsoft.FSharp.Core.FSharpFunc{``1,System.Double},Microsoft.FSharp.Core.FSharpFunc{``1,System.Double},System.String)">
<summary>
 Tests approximate inequality between two floats.
</summary>
</member>
<member name="M:WebSharper.Testing.Pervasives.SubtestBuilder.NotApproxEqualAsync``2(Microsoft.FSharp.Core.FSharpFunc{WebSharper.Testing.Pervasives.QUnit.Asserter,Microsoft.FSharp.Core.FSharpChoice{``1,Microsoft.FSharp.Control.FSharpAsync{``1}}},Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Control.FSharpAsync{System.Double}},Microsoft.FSharp.Core.FSharpFunc{``1,System.Double})">
<summary>
 Tests approximate inequality between two floats.
</summary>
</member>
<member name="M:WebSharper.Testing.Pervasives.SubtestBuilder.NotApproxEqual``2(Microsoft.FSharp.Core.FSharpFunc{WebSharper.Testing.Pervasives.QUnit.Asserter,Microsoft.FSharp.Core.FSharpChoice{``1,Microsoft.FSharp.Control.FSharpAsync{``1}}},Microsoft.FSharp.Core.FSharpFunc{``1,System.Double},Microsoft.FSharp.Core.FSharpFunc{``1,System.Double})">
<summary>
 Tests approximate inequality between two floats.
</summary>
</member>
<member name="M:WebSharper.Testing.Pervasives.SubtestBuilder.JsEqualMsgAsync``2(Microsoft.FSharp.Core.FSharpFunc{WebSharper.Testing.Pervasives.QUnit.Asserter,Microsoft.FSharp.Core.FSharpChoice{``1,Microsoft.FSharp.Control.FSharpAsync{``1}}},Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Control.FSharpAsync{``0}},Microsoft.FSharp.Core.FSharpFunc{``1,``0},System.String)">
<summary>
 Tests equality between two values using JavaScript `==`.
</summary>
</member>
<member name="M:WebSharper.Testing.Pervasives.SubtestBuilder.JsEqualMsg``2(Microsoft.FSharp.Core.FSharpFunc{WebSharper.Testing.Pervasives.QUnit.Asserter,Microsoft.FSharp.Core.FSharpChoice{``1,Microsoft.FSharp.Control.FSharpAsync{``1}}},Microsoft.FSharp.Core.FSharpFunc{``1,``0},Microsoft.FSharp.Core.FSharpFunc{``1,``0},System.String)">
<summary>
 Tests equality between two values using JavaScript `==`.
</summary>
</member>
<member name="M:WebSharper.Testing.Pervasives.SubtestBuilder.JsEqualAsync``2(Microsoft.FSharp.Core.FSharpFunc{WebSharper.Testing.Pervasives.QUnit.Asserter,Microsoft.FSharp.Core.FSharpChoice{``1,Microsoft.FSharp.Control.FSharpAsync{``1}}},Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Control.FSharpAsync{``0}},Microsoft.FSharp.Core.FSharpFunc{``1,``0})">
<summary>
 Tests equality between two values using JavaScript `==`.
</summary>
</member>
<member name="M:WebSharper.Testing.Pervasives.SubtestBuilder.JsEqual``2(Microsoft.FSharp.Core.FSharpFunc{WebSharper.Testing.Pervasives.QUnit.Asserter,Microsoft.FSharp.Core.FSharpChoice{``1,Microsoft.FSharp.Control.FSharpAsync{``1}}},Microsoft.FSharp.Core.FSharpFunc{``1,``0},Microsoft.FSharp.Core.FSharpFunc{``1,``0})">
<summary>
 Tests equality between two values using JavaScript `==`.
</summary>
</member>
<member name="M:WebSharper.Testing.Pervasives.SubtestBuilder.IsTrueMsgAsync``1(Microsoft.FSharp.Core.FSharpFunc{WebSharper.Testing.Pervasives.QUnit.Asserter,Microsoft.FSharp.Core.FSharpChoice{``0,Microsoft.FSharp.Control.FSharpAsync{``0}}},Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Control.FSharpAsync{System.Boolean}},System.String)">
<summary>
 Checks that a boolean is true.
</summary>
</member>
<member name="M:WebSharper.Testing.Pervasives.SubtestBuilder.IsTrueMsg``1(Microsoft.FSharp.Core.FSharpFunc{WebSharper.Testing.Pervasives.QUnit.Asserter,Microsoft.FSharp.Core.FSharpChoice{``0,Microsoft.FSharp.Control.FSharpAsync{``0}}},Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.String)">
<summary>
 Checks that a boolean is true.
</summary>
</member>
<member name="M:WebSharper.Testing.Pervasives.SubtestBuilder.IsTrueAsync``1(Microsoft.FSharp.Core.FSharpFunc{WebSharper.Testing.Pervasives.QUnit.Asserter,Microsoft.FSharp.Core.FSharpChoice{``0,Microsoft.FSharp.Control.FSharpAsync{``0}}},Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Control.FSharpAsync{System.Boolean}})">
<summary>
 Checks that a boolean is true.
</summary>
</member>
<member name="M:WebSharper.Testing.Pervasives.SubtestBuilder.IsTrue``1(Microsoft.FSharp.Core.FSharpFunc{WebSharper.Testing.Pervasives.QUnit.Asserter,Microsoft.FSharp.Core.FSharpChoice{``0,Microsoft.FSharp.Control.FSharpAsync{``0}}},Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean})">
<summary>
 Checks that a boolean is true.
</summary>
</member>
<member name="M:WebSharper.Testing.Pervasives.SubtestBuilder.IsFalseMsg``1(Microsoft.FSharp.Core.FSharpFunc{WebSharper.Testing.Pervasives.QUnit.Asserter,Microsoft.FSharp.Core.FSharpChoice{``0,Microsoft.FSharp.Control.FSharpAsync{``0}}},Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.String)">
<summary>
 Checks that a boolean is false.
</summary>
</member>
<member name="M:WebSharper.Testing.Pervasives.SubtestBuilder.IsFalseAsync``1(Microsoft.FSharp.Core.FSharpFunc{WebSharper.Testing.Pervasives.QUnit.Asserter,Microsoft.FSharp.Core.FSharpChoice{``0,Microsoft.FSharp.Control.FSharpAsync{``0}}},Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Control.FSharpAsync{System.Boolean}},System.String)">
<summary>
 Checks that a boolean is false.
</summary>
</member>
<member name="M:WebSharper.Testing.Pervasives.SubtestBuilder.IsFalseAsync``1(Microsoft.FSharp.Core.FSharpFunc{WebSharper.Testing.Pervasives.QUnit.Asserter,Microsoft.FSharp.Core.FSharpChoice{``0,Microsoft.FSharp.Control.FSharpAsync{``0}}},Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Control.FSharpAsync{System.Boolean}})">
<summary>
 Checks that a boolean is false.
</summary>
</member>
<member name="M:WebSharper.Testing.Pervasives.SubtestBuilder.IsFalse``1(Microsoft.FSharp.Core.FSharpFunc{WebSharper.Testing.Pervasives.QUnit.Asserter,Microsoft.FSharp.Core.FSharpChoice{``0,Microsoft.FSharp.Control.FSharpAsync{``0}}},Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean})">
<summary>
 Checks that a boolean is false.
</summary>
</member>
<member name="M:WebSharper.Testing.Pervasives.SubtestBuilder.ForEach``4(Microsoft.FSharp.Core.FSharpFunc{WebSharper.Testing.Pervasives.QUnit.Asserter,Microsoft.FSharp.Core.FSharpChoice{``0,Microsoft.FSharp.Control.FSharpAsync{``0}}},Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``2,Microsoft.FSharp.Core.FSharpFunc{WebSharper.Testing.Pervasives.QUnit.Asserter,Microsoft.FSharp.Core.FSharpChoice{``3,Microsoft.FSharp.Control.FSharpAsync{``3}}}}})">
<summary>
 Runs a test for each element in a sequence.
</summary>
</member>
<member name="">

</member>
<member name="M:WebSharper.Testing.Pervasives.SubtestBuilder.For``2(WebSharper.Testing.Random.Generator{``0},Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{WebSharper.Testing.Pervasives.QUnit.Asserter,Microsoft.FSharp.Core.FSharpChoice{``1,Microsoft.FSharp.Control.FSharpAsync{``1}}}})">
<summary>
 Runs a test for 100 occurrences of a random generator.
</summary>
</member>
<member name="M:WebSharper.Testing.Pervasives.SubtestBuilder.For``2(WebSharper.Testing.Random.Sample{``0},Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{WebSharper.Testing.Pervasives.QUnit.Asserter,Microsoft.FSharp.Core.FSharpChoice{``1,Microsoft.FSharp.Control.FSharpAsync{``1}}}})">
<summary>
 Runs a test for each element in a randomly generated sample.
</summary>
</member>
<member name="">

</member>
<member name="M:WebSharper.Testing.Pervasives.SubtestBuilder.EqualMsgAsync``2(Microsoft.FSharp.Core.FSharpFunc{WebSharper.Testing.Pervasives.QUnit.Asserter,Microsoft.FSharp.Core.FSharpChoice{``1,Microsoft.FSharp.Control.FSharpAsync{``1}}},Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Control.FSharpAsync{``0}},Microsoft.FSharp.Core.FSharpFunc{``1,``0},System.String)">
<summary>
 Tests equality between two values using F# `=`.
</summary>
</member>
<member name="M:WebSharper.Testing.Pervasives.SubtestBuilder.EqualMsg``2(Microsoft.FSharp.Core.FSharpFunc{WebSharper.Testing.Pervasives.QUnit.Asserter,Microsoft.FSharp.Core.FSharpChoice{``1,Microsoft.FSharp.Control.FSharpAsync{``1}}},Microsoft.FSharp.Core.FSharpFunc{``1,``0},Microsoft.FSharp.Core.FSharpFunc{``1,``0},System.String)">
<summary>
 Tests equality between two values using F# `=`.
</summary>
</member>
<member name="M:WebSharper.Testing.Pervasives.SubtestBuilder.EqualAsync``2(Microsoft.FSharp.Core.FSharpFunc{WebSharper.Testing.Pervasives.QUnit.Asserter,Microsoft.FSharp.Core.FSharpChoice{``1,Microsoft.FSharp.Control.FSharpAsync{``1}}},Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Control.FSharpAsync{``0}},Microsoft.FSharp.Core.FSharpFunc{``1,``0})">
<summary>
 Tests equality between two values using F# `=`.
</summary>
</member>
<member name="M:WebSharper.Testing.Pervasives.SubtestBuilder.Equal``2(Microsoft.FSharp.Core.FSharpFunc{WebSharper.Testing.Pervasives.QUnit.Asserter,Microsoft.FSharp.Core.FSharpChoice{``1,Microsoft.FSharp.Control.FSharpAsync{``1}}},Microsoft.FSharp.Core.FSharpFunc{``1,``0},Microsoft.FSharp.Core.FSharpFunc{``1,``0})">
<summary>
 Tests equality between two values using F# `=`.
</summary>
</member>
<member name="M:WebSharper.Testing.Pervasives.SubtestBuilder.DeepEqualMsgAsync``2(Microsoft.FSharp.Core.FSharpFunc{WebSharper.Testing.Pervasives.QUnit.Asserter,Microsoft.FSharp.Core.FSharpChoice{``1,Microsoft.FSharp.Control.FSharpAsync{``1}}},Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Control.FSharpAsync{``0}},Microsoft.FSharp.Core.FSharpFunc{``1,``0},System.String)">
<summary>
 Tests equality between two values using JavaScript `===`.
</summary>
</member>
<member name="M:WebSharper.Testing.Pervasives.SubtestBuilder.DeepEqualMsg``2(Microsoft.FSharp.Core.FSharpFunc{WebSharper.Testing.Pervasives.QUnit.Asserter,Microsoft.FSharp.Core.FSharpChoice{``1,Microsoft.FSharp.Control.FSharpAsync{``1}}},Microsoft.FSharp.Core.FSharpFunc{``1,``0},Microsoft.FSharp.Core.FSharpFunc{``1,``0},System.String)">
<summary>
 Tests equality between two values using JavaScript `===`.
</summary>
</member>
<member name="M:WebSharper.Testing.Pervasives.SubtestBuilder.DeepEqualAsync``2(Microsoft.FSharp.Core.FSharpFunc{WebSharper.Testing.Pervasives.QUnit.Asserter,Microsoft.FSharp.Core.FSharpChoice{``1,Microsoft.FSharp.Control.FSharpAsync{``1}}},Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Control.FSharpAsync{``0}},Microsoft.FSharp.Core.FSharpFunc{``1,``0})">
<summary>
 Tests equality between two values using JavaScript `===`.
</summary>
</member>
<member name="M:WebSharper.Testing.Pervasives.SubtestBuilder.DeepEqual``2(Microsoft.FSharp.Core.FSharpFunc{WebSharper.Testing.Pervasives.QUnit.Asserter,Microsoft.FSharp.Core.FSharpChoice{``1,Microsoft.FSharp.Control.FSharpAsync{``1}}},Microsoft.FSharp.Core.FSharpFunc{``1,``0},Microsoft.FSharp.Core.FSharpFunc{``1,``0})">
<summary>
 Tests equality between two values using JavaScript `===`.
</summary>
</member>
<member name="">

</member>
<member name="M:WebSharper.Testing.Pervasives.SubtestBuilder.ApproxEqualMsgAsync``2(Microsoft.FSharp.Core.FSharpFunc{WebSharper.Testing.Pervasives.QUnit.Asserter,Microsoft.FSharp.Core.FSharpChoice{``1,Microsoft.FSharp.Control.FSharpAsync{``1}}},Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Control.FSharpAsync{System.Double}},Microsoft.FSharp.Core.FSharpFunc{``1,System.Double},System.String)">
<summary>
 Tests approximate equality between two floats.
</summary>
</member>
<member name="M:WebSharper.Testing.Pervasives.SubtestBuilder.ApproxEqualMsg``2(Microsoft.FSharp.Core.FSharpFunc{WebSharper.Testing.Pervasives.QUnit.Asserter,Microsoft.FSharp.Core.FSharpChoice{``1,Microsoft.FSharp.Control.FSharpAsync{``1}}},Microsoft.FSharp.Core.FSharpFunc{``1,System.Double},Microsoft.FSharp.Core.FSharpFunc{``1,System.Double},System.String)">
<summary>
 Tests approximate equality between two floats.
</summary>
</member>
<member name="M:WebSharper.Testing.Pervasives.SubtestBuilder.ApproxEqualAsync``2(Microsoft.FSharp.Core.FSharpFunc{WebSharper.Testing.Pervasives.QUnit.Asserter,Microsoft.FSharp.Core.FSharpChoice{``1,Microsoft.FSharp.Control.FSharpAsync{``1}}},Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Control.FSharpAsync{System.Double}},Microsoft.FSharp.Core.FSharpFunc{``1,System.Double})">
<summary>
 Tests approximate equality between two floats.
</summary>
</member>
<member name="M:WebSharper.Testing.Pervasives.SubtestBuilder.ApproxEqual``2(Microsoft.FSharp.Core.FSharpFunc{WebSharper.Testing.Pervasives.QUnit.Asserter,Microsoft.FSharp.Core.FSharpChoice{``1,Microsoft.FSharp.Control.FSharpAsync{``1}}},Microsoft.FSharp.Core.FSharpFunc{``1,System.Double},Microsoft.FSharp.Core.FSharpFunc{``1,System.Double})">
<summary>
 Tests approximate equality between two floats.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:WebSharper.Testing.Pervasives.Runner">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:WebSharper.Testing.Pervasives.QUnit">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:WebSharper.Testing.Pervasives.Internal">

</member>
<member name="T:WebSharper.Testing.Pervasives">
<summary>
 Common utilities for testing.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="F:WebSharper.Testing.Random.Generator`1.Next">
<summary>
 A function generating a new random value.
</summary>
</member>
<member name="F:WebSharper.Testing.Random.Generator`1.Base">
<summary>
 An array of values that must be tested against.
</summary>
</member>
<member name="T:WebSharper.Testing.Random.Generator`1">
<summary>
 A test case generator.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:WebSharper.Testing.Random.Anything">
<summary>
 Generates ints, floats, bools, strings and tuples, lists, arrays, options thereof.
</summary>
</member>
<member name="">

</member>
<member name="M:WebSharper.Testing.Random.Box``1(WebSharper.Testing.Random.Generator{``0})">
<summary>
 Boxes the generated data.
</summary>
</member>
<member name="M:WebSharper.Testing.Random.OptionOf``1(WebSharper.Testing.Random.Generator{``0})">
<summary>
 Promotes a generator to a generator of options.
</summary>
</member>
<member name="M:WebSharper.Testing.Random.Const``1(``0)">
<summary>
 Creates a generator that always generates the given value.
</summary>
</member>
<member name="M:WebSharper.Testing.Random.MixManyWithoutBases``1(WebSharper.Testing.Random.Generator{``0}[])">
<summary>
 Mixes many generators ignoring their bases.
</summary>
</member>
<member name="M:WebSharper.Testing.Random.MixMany``1(WebSharper.Testing.Random.Generator{``0}[])">
<summary>
 Mixes many generators witohut bias.
</summary>
</member>
<member name="M:WebSharper.Testing.Random.Mix``1(WebSharper.Testing.Random.Generator{``0},WebSharper.Testing.Random.Generator{``0})">
<summary>
 Mixes two generators without bias.
</summary>
</member>
<member name="M:WebSharper.Testing.Random.OneOf``1(``0[])">
<summary>
 Creates a generator with a random uniform distribution over a set
 of values supplied in the `seeds` array.
</summary>
</member>
<member name="M:WebSharper.Testing.Random.Tuple3Of``3(WebSharper.Testing.Random.Generator{``0},WebSharper.Testing.Random.Generator{``1},WebSharper.Testing.Random.Generator{``2})">
<summary>
 Promotes a triple of generators to a generator of triples.
</summary>
</member>
<member name="M:WebSharper.Testing.Random.Tuple2Of``2(WebSharper.Testing.Random.Generator{``0},WebSharper.Testing.Random.Generator{``1})">
<summary>
 Promotes a tuple of generators to a generator of tuples.
</summary>
</member>
<member name="P:WebSharper.Testing.Random.StringExhaustive">
<summary>
 Generates random strings including nulls.
</summary>
</member>
<member name="P:WebSharper.Testing.Random.String">
<summary>
 Generates random strings.
</summary>
</member>
<member name="M:WebSharper.Testing.Random.ListOf``1(WebSharper.Testing.Random.Generator{``0})">
<summary>
 Generates random lists.
</summary>
</member>
<member name="M:WebSharper.Testing.Random.ArrayOf``1(WebSharper.Testing.Random.Generator{``0})">
<summary>
 Generates random arrays.
</summary>
</member>
<member name="M:WebSharper.Testing.Random.FloatWithin(System.Double,System.Double)">
<summary>
 Generates integers within a range.
</summary>
</member>
<member name="M:WebSharper.Testing.Random.Within(System.Int32,System.Int32)">
<summary>
 Generates integers within a range.
</summary>
</member>
<member name="P:WebSharper.Testing.Random.Natural">
<summary>
 Generates random natural numbers (0, 1, ..).
</summary>
</member>
<member name="P:WebSharper.Testing.Random.Int">
<summary>
 Generates random int values.
</summary>
</member>
<member name="P:WebSharper.Testing.Random.FloatExhaustive">
<summary>
 Generates random doubles, including corner cases.
</summary>
</member>
<member name="P:WebSharper.Testing.Random.Float">
<summary>
 Generates random doubles.
</summary>
</member>
<member name="P:WebSharper.Testing.Random.Boolean">
<summary>
 Generates random booleans.
</summary>
</member>
<member name="M:WebSharper.Testing.Random.Exponential(System.Double)">
<summary>
 Exponential distribution sampler.
</summary>
</member>
<member name="P:WebSharper.Testing.Random.StandardUniform">
<summary>
 Standard uniform distribution sampler.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:WebSharper.Testing.Random.op_EqualsEqualsGreater(System.Boolean,System.Boolean)">
<summary>
 Logical implication (alias).
</summary>
</member>
<member name="M:WebSharper.Testing.Random.Implies(System.Boolean,System.Boolean)">
<summary>
 Logical implication.
</summary>
</member>
<member name="M:WebSharper.Testing.Random.Map``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},WebSharper.Testing.Random.Generator{``0})">
<summary>
 Maps a function over a generator.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:WebSharper.Testing.Random.Internal">

</member>
<member name="T:WebSharper.Testing.Random">
<summary>
 Random test case generators and their combinators.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:WebSharper.Testing.Resources">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:WebSharper.Testing.Runner">
<summary>
 Test Runner.
</summary>
</member>
</members>
</doc>
