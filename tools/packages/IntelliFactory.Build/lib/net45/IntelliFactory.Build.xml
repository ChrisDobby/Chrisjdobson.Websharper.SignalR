<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>IntelliFactory.Build</name></assembly>
<members>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:IntelliFactory.Build.BuildTool.PackageId(System.String,Microsoft.FSharp.Core.FSharpOption{System.String})">
<summary>
 Short-hand to set `PackageId.Current` and `PackageVersion.Current`.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:IntelliFactory.Build.ConsoleProgram.Start(System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Implements the entry-point method returning the exit code.
</summary>
</member>
<member name="">

</member>
<member name="T:IntelliFactory.Build.ConsoleProgram">
<summary>
 Implements command-line `IB.exe` logic.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:IntelliFactory.Build.FSharpCompilerTask">
<summary>
 Internal facade for the F# builder.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:IntelliFactory.Build.FSharpProject">
<summary>
 Represents an F# project building a single assembly.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:IntelliFactory.Build.FSharpProjectWriter">
<summary>
 Internal utility for generating F# projects.
</summary>
</member>
<member name="P:IntelliFactory.Build.FSharpTool.Current">
<summary>
 Current `FSharpProjects` instance.
</summary>
</member>
<member name="M:IntelliFactory.Build.FSharpTool.WindowsExecutable(System.String)">
<summary>
 Creates a non-console executable (winexe) project.
</summary>
</member>
<member name="M:IntelliFactory.Build.FSharpTool.Library(System.String)">
<summary>
 Creates a library project.
</summary>
</member>
<member name="M:IntelliFactory.Build.FSharpTool.ExecuteScript(System.String,Microsoft.FSharp.Core.FSharpOption{IntelliFactory.Build.ResolvedReferences},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.String}})">
<summary>
 Executs an F# script in a sub-process.
</summary>
</member>
<member name="M:IntelliFactory.Build.FSharpTool.ConsoleExecutable(System.String)">
<summary>
 Creates a console (exe) project.
</summary>
</member>
<member name="T:IntelliFactory.Build.FSharpTool">
<summary>
 F#-related build facilities.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:IntelliFactory.Build.FSharpVersion.Current">
<summary>
 Current F# version for the build.
</summary>
</member>
<member name="T:IntelliFactory.Build.FSharpVersion">
<summary>
 Represents F# version.
</summary>
</member>
<member name="P:IntelliFactory.Build.Framework.Name">
<summary>
 The NuGet-friendly name of the framework, such as &quot;net45&quot;.
</summary>
</member>
<member name="T:IntelliFactory.Build.Framework">
<summary>
 Represents the target framework (with version and profile).
</summary>
</member>
<member name="P:IntelliFactory.Build.Frameworks.Net45">
<summary>
 .NET Framework 4.5.
</summary>
</member>
<member name="P:IntelliFactory.Build.Frameworks.Net40CP">
<summary>
 .NET Framework 4.0 Client Profile.
</summary>
</member>
<member name="P:IntelliFactory.Build.Frameworks.Net40">
<summary>
 .NET Framework 4.0.
</summary>
</member>
<member name="P:IntelliFactory.Build.Frameworks.Net35CP">
<summary>
 .NET Framework 3.5 Client Profile.
</summary>
</member>
<member name="P:IntelliFactory.Build.Frameworks.Net35">
<summary>
 .NET Framework 3.5.
</summary>
</member>
<member name="P:IntelliFactory.Build.Frameworks.Net30">
<summary>
 .NET Framework 3.0.
</summary>
</member>
<member name="P:IntelliFactory.Build.Frameworks.Net20">
<summary>
 .NET Framework 2.0.
</summary>
</member>
<member name="P:IntelliFactory.Build.Frameworks.Current">
<summary>
 The current tool as a parameter.
</summary>
</member>
<member name="P:IntelliFactory.Build.Frameworks.All">
<summary>
 Lists all known frameworks.
</summary>
</member>
<member name="M:IntelliFactory.Build.Frameworks.ToFrameworkName(IntelliFactory.Build.Framework)">
<summary>
 Constructs an equivalent `FrameworkName` object.
</summary>
</member>
<member name="M:IntelliFactory.Build.Frameworks.IsCompatible(IntelliFactory.Build.Framework,IntelliFactory.Build.Framework)">
<summary>
 Tests backwards compatibility.
</summary>
</member>
<member name="M:IntelliFactory.Build.Frameworks.FromFrameworkName(System.Runtime.Versioning.FrameworkName)">
<summary>
 Tries to parse a `FrameworkName` object.
</summary>
</member>
<member name="M:IntelliFactory.Build.Frameworks.FindSupported(System.Collections.Generic.IEnumerable{IntelliFactory.Build.Framework})">
<summary>
 Given supported frameworks for a given assembly, lists
 all frameworks on which the assembly would work given the
 backwards compatibility relation defined by `IsCompatible`.
</summary>
</member>
<member name="M:IntelliFactory.Build.Frameworks.Cache``1(Microsoft.FSharp.Core.FSharpFunc{IntelliFactory.Build.Framework,``0})">
<summary>
 Memoizes a function over frameworks.
</summary>
</member>
<member name="T:IntelliFactory.Build.Frameworks">
<summary>
 Provides utilities for working with framework representations.
</summary>
</member>
<member name="P:IntelliFactory.Build.INuGetExportingProject.NuGetFiles">
<summary>
 Files exported by the project.
</summary>
</member>
<member name="T:IntelliFactory.Build.INuGetExportingProject">
<summary>
 A project that contirbutes files to a created NuGet package.
</summary>
</member>
<member name="P:IntelliFactory.Build.INuGetFile.TargetPath">
<summary>
 Relative path inside the NuGet package archive, such as `/lib/net40/My.dll`.
</summary>
</member>
<member name="M:IntelliFactory.Build.INuGetFile.Read">
<summary>
 Reads the file contents.
</summary>
</member>
<member name="T:IntelliFactory.Build.INuGetFile">
<summary>
 Represents a file that is to become a part of a `NuGet` archive.
</summary>
</member>
<member name="P:IntelliFactory.Build.INuGetReference.Paths">
<summary>
 The specific paths to reference inside the package archive.
 If &quot;None&quot;, this is determined automatically.
</summary>
</member>
<member name="P:IntelliFactory.Build.INuGetReference.PackageVersion">
<summary>
 The version, or &quot;None&quot; to obtain latest, such as &quot;2.7.1-alpha&quot;.
</summary>
</member>
<member name="P:IntelliFactory.Build.INuGetReference.PackageId">
<summary>
 The identifier, such as &quot;NuGet.Core&quot;.
</summary>
</member>
<member name="T:IntelliFactory.Build.INuGetReference">
<summary>
 Represents a reference to the NuGet repository.
</summary>
</member>
<member name="P:IntelliFactory.Build.IProject.References">
<summary>
 The references required to build the project.
</summary>
</member>
<member name="P:IntelliFactory.Build.IProject.Parametric">
<summary>
 Customizable parameters.
</summary>
</member>
<member name="P:IntelliFactory.Build.IProject.Name">
<summary>
 Informational project name.
</summary>
</member>
<member name="P:IntelliFactory.Build.IProject.Framework">
<summary>
 The target framework.
</summary>
</member>
<member name="M:IntelliFactory.Build.IProject.PrepareReferences">
<summary>
 Prepares references for the project.
</summary>
</member>
<member name="M:IntelliFactory.Build.IProject.Clean">
<summary>
 Cleans the project.
</summary>
</member>
<member name="M:IntelliFactory.Build.IProject.Build">
<summary>
 Builds the project.
</summary>
</member>
<member name="T:IntelliFactory.Build.IProject">
<summary>
 Represents a project that can build some artifacts.
</summary>
</member>
<member name="P:IntelliFactory.Build.IReferenceProject.GeneratedAssemblyFiles">
<summary>
 Paths to the assembly files generated by the project.
</summary>
</member>
<member name="T:IntelliFactory.Build.IReferenceProject">
<summary>
 Represents a project that can be used as a reference.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:IntelliFactory.Build.NuGetFile.Local(System.String,System.String)">
<summary>
 Reads a local file as a `INuGetFile` file.
</summary>
</member>
<member name="M:IntelliFactory.Build.NuGetFile.LibraryFile(IntelliFactory.Build.Framework,System.String)">
<summary>
 Reads a library file as an `INuGetFile` in a `lib/netXX` folder.
</summary>
</member>
<member name="">

</member>
<member name="M:IntelliFactory.Build.NuGetPackageBuilder.ProjectUrl(System.String)">
<summary>
 Configures project Url.
</summary>
</member>
<member name="M:IntelliFactory.Build.NuGetPackageBuilder.Id(System.String)">
<summary>
 Configures package ID.
</summary>
</member>
<member name="M:IntelliFactory.Build.NuGetPackageBuilder.GetComputedVersion">
<summary>
 Gets the computed version.
</summary>
</member>
<member name="M:IntelliFactory.Build.NuGetPackageBuilder.GetComputedFileName">
<summary>
 Gets the computed full path to the `nupkg` file.
</summary>
</member>
<member name="M:IntelliFactory.Build.NuGetPackageBuilder.Description(System.String)">
<summary>
 Configures description.
</summary>
</member>
<member name="M:IntelliFactory.Build.NuGetPackageBuilder.Configure(Microsoft.FSharp.Core.FSharpFunc{IntelliFactory.Build.NuGetPackageConfig,IntelliFactory.Build.NuGetPackageConfig})">
<summary>
 Allows to set various configuration options.
</summary>
</member>
<member name="M:IntelliFactory.Build.NuGetPackageBuilder.Authors(System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Configures authors.
</summary>
</member>
<member name="M:IntelliFactory.Build.NuGetPackageBuilder.Apache20License">
<summary>
 Confgures package license to point to Apache 2.0.
</summary>
</member>
<member name="M:IntelliFactory.Build.NuGetPackageBuilder.AddProject(IntelliFactory.Build.IProject)">
<summary>
 Adds NuGet references for a given project as package references.
</summary>
</member>
<member name="M:IntelliFactory.Build.NuGetPackageBuilder.AddPackage(IntelliFactory.Build.NuGetPackageBuilder)">
<summary>
 Adds another package as a dependency.
</summary>
</member>
<member name="M:IntelliFactory.Build.NuGetPackageBuilder.AddNuGetExportingProject(IntelliFactory.Build.INuGetExportingProject)">
<summary>
 Adds project exports to the NuGet package files.
</summary>
</member>
<member name="M:IntelliFactory.Build.NuGetPackageBuilder.AddFile(System.String,System.String)">
 <summary>Adds an extra file to the package.<summary/>
 <param name="sourcePath" />
 <param name="targetPath" />
</member>
<member name="M:IntelliFactory.Build.NuGetPackageBuilder.Add``1(``0)">
<summary>
 Combines the previous two overloads.
</summary>
</member>
<member name="T:IntelliFactory.Build.NuGetPackageBuilder">
<summary>
 Defines how to build a NuGet package.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:IntelliFactory.Build.NuGetPackageConfig.WithApache20License">
<summary>
 Sets `LicenseUrl` to point to Apache 2.0 license.
 Sets `RequiresLicesnseAcceptance` to `false`.
</summary>
</member>
<member name="T:IntelliFactory.Build.NuGetPackageConfig">
<summary>
 Configuration for building a NuGet package.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:IntelliFactory.Build.PackageId.Current">
<summary>
 The current package identifier, by default determined from the name of the root
 directory. This is used to tag assemblies with `AssemblyProductAttribute`, and determine
 full `PackageVersion.Full` by scanning NuGet to auto-increment the build/revision numbers.
</summary>
</member>
<member name="T:IntelliFactory.Build.PackageId">
<summary>
 Package identifier parameters.
</summary>
</member>
<member name="P:IntelliFactory.Build.PackageVersion.Text">
<summary>
 The textual representation, `major.minor-suffix`.
</summary>
</member>
<member name="P:IntelliFactory.Build.PackageVersion.Suffix">
<summary>
 The textual suffix for pre-release versions, if any.
</summary>
</member>
<member name="P:IntelliFactory.Build.PackageVersion.Minor">
<summary>
 The minor number.
</summary>
</member>
<member name="P:IntelliFactory.Build.PackageVersion.Major">
<summary>
 The major number.
</summary>
</member>
<member name="P:IntelliFactory.Build.PackageVersion.Full">
<summary>
 The current full version. This is used to tag assemblies and with `AssemblyFileVersionAttribute`,
 and may also be used to determine the version of constructed NuGet packages. This defaults to
 `maj.min.bld.rev` where `maj`, `min` are taken from `PackageVersion.Current`, `bld` is determined
 by auto-incrementing until there is no conflict with global NuGet packages, and `rev` is only set
 in build server environments by consuling `BuildConfig.BuildNumber`.
</summary>
</member>
<member name="P:IntelliFactory.Build.PackageVersion.Current">
<summary>
 The current version, defaults to `0.0`.
 This is used to tag assemblies with `AssemblyVersionAttribute`, where build and
 revision numbers are set to `0`. This is also by default used to determine `PackageVersion.Full`.
</summary>
</member>
<member name="M:IntelliFactory.Build.PackageVersion.Parse(System.String)">
<summary>
 Parses from a string.
</summary>
</member>
<member name="M:IntelliFactory.Build.PackageVersion.Create(System.Int32,System.Int32,Microsoft.FSharp.Core.FSharpOption{System.String})">
<summary>
 Creates a new version.
</summary>
</member>
<member name="T:IntelliFactory.Build.PackageVersion">
<summary>
 Combines a basic version (major, minor numbers) with an optional textual suffix.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:IntelliFactory.Build.Reference.System(System.String)">
<summary>
 Builds a reference to a system-resolved assembly by name.
</summary>
</member>
<member name="M:IntelliFactory.Build.Reference.Project(IntelliFactory.Build.IReferenceProject)">
<summary>
 Builds a reference to project output artifacts.
</summary>
</member>
<member name="M:IntelliFactory.Build.Reference.NuGet(IntelliFactory.Build.INuGetReference)">
<summary>
 Builds a reference to NuGet-supplied artifacts.
</summary>
</member>
<member name="M:IntelliFactory.Build.Reference.File(System.String)">
<summary>
 Builds a reference to a specific file.
</summary>
</member>
<member name="T:IntelliFactory.Build.Reference">
<summary>
 Represents assembly references.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:IntelliFactory.Build.References.FindTool(IntelliFactory.Build.ResolvedReferences,IntelliFactory.Build.Framework,System.String)">
<summary>
 Resolves a path to a NuGet-supplied executable under a `tools` folder, such
 as `WebSharper.exe`.
</summary>
</member>
<member name="">

</member>
<member name="P:IntelliFactory.Build.ResolvedReference.Path">
<summary>
 Full path to the resolved reference file.
</summary>
</member>
<member name="P:IntelliFactory.Build.ResolvedReference.IsFrameworkReference">
<summary>
 Tests it the reference comes from the framework, as opposed to `NuGet`.
</summary>
</member>
<member name="T:IntelliFactory.Build.ResolvedReference">
<summary>
 Represents a resolved reference to an assembly.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:IntelliFactory.Build.ResolvedReferences">
<summary>
 Represents a set of resolved assembly references.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:IntelliFactory.Build.Annotations">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:IntelliFactory.Build.BuildConfig">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:IntelliFactory.Build.FSharpCompiler">

</member>
<member name="P:IntelliFactory.Build.FSharpConfig.Kind">
<summary>
 The kind of project to build.
</summary>
</member>
<member name="">

</member>
<member name="P:IntelliFactory.Build.FSharpConfig.Sources">
<summary>
 Paths to source files to compile.
</summary>
</member>
<member name="P:IntelliFactory.Build.FSharpConfig.References">
<summary>
 References to resovle before building the project.
</summary>
</member>
<member name="P:IntelliFactory.Build.FSharpConfig.ReferenceProjectPath">
<summary>
 If set, gives the path of the the MSBuild project file to generate.
 The generated file will contain all resolved references.
</summary>
</member>
<member name="P:IntelliFactory.Build.FSharpConfig.OutputPath">
<summary>
 The primary DLL or EXE output path.
</summary>
</member>
<member name="P:IntelliFactory.Build.FSharpConfig.OtherFlags">
<summary>
 Extra flags to pass to the F# compiler.
</summary>
</member>
<member name="P:IntelliFactory.Build.FSharpConfig.FSharpHome">
<summary>
 F# home directory where `fsc.exe` resides.
</summary>
</member>
<member name="P:IntelliFactory.Build.FSharpConfig.EmbeddedResources">
<summary>
 Paths to resources to embed into the assembly.
</summary>
</member>
<member name="P:IntelliFactory.Build.FSharpConfig.DocPath">
<summary>
 Path to the generated XML file, if one is desired.
</summary>
</member>
<member name="P:IntelliFactory.Build.FSharpConfig.BaseDir">
<summary>
 The base directory against which project-local paths are resolved.
</summary>
</member>
<member name="T:IntelliFactory.Build.FSharpConfig">
<summary>
 Global parameters building for F# projects.
</summary>
</member>
<member name="M:IntelliFactory.Build.FSharpProjectExtensinos.IParametric`1.ExtraAssemblySearchPaths``1(IntelliFactory.Core.Parametrization.IParametric{``0},System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Add paths to search for assemblies.
</summary>
</member>
<member name="M:IntelliFactory.Build.FSharpProjectExtensinos.IParametric`1.SourcesFromProject``1(IntelliFactory.Core.Parametrization.IParametric{``0},Microsoft.FSharp.Core.FSharpOption{System.String})">
<summary>
 Approximately parses an MSBuild project file looking for `Compile` declarations.
 Adds all files it finds to the current project sources.
 If no project file is given, infers it from the project name.
</summary>
</member>
<member name="M:IntelliFactory.Build.FSharpProjectExtensinos.IParametric`1.Sources``1(IntelliFactory.Core.Parametrization.IParametric{``0},System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Adds paths to F# sources.
</summary>
</member>
<member name="M:IntelliFactory.Build.FSharpProjectExtensinos.IParametric`1.References``2(IntelliFactory.Core.Parametrization.IParametric{``0},Microsoft.FSharp.Core.FSharpFunc{IntelliFactory.Build.ReferenceBuilder,``1})">
<summary>
 Adds references to the Project.
</summary>
</member>
<member name="M:IntelliFactory.Build.FSharpProjectExtensinos.IParametric`1.Modules``1(IntelliFactory.Core.Parametrization.IParametric{``0},System.Collections.Generic.IEnumerable{System.String})">
<summary>
 A shorthand for adding sources, for every module name `N`,
 `N.fsi` and `N.fs` are included automatically.
</summary>
</member>
<member name="M:IntelliFactory.Build.FSharpProjectExtensinos.IParametric`1.Embed``1(IntelliFactory.Core.Parametrization.IParametric{``0},System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Adds resource files to embed.
</summary>
</member>
<member name="T:IntelliFactory.Build.FSharpProjectExtensinos">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:IntelliFactory.Build.FSharpXml">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:IntelliFactory.Build.MSBuild.MSBuildProject.Property(System.String,System.String)">
<summary>
 Sets any property.
</summary>
</member>
<member name="">

</member>
<member name="M:IntelliFactory.Build.MSBuild.MSBuildProject.Configuration(System.String)">
<summary>
 Sets the configuration property.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:IntelliFactory.Build.MSBuild.MSBuildProject">
<summary>
 Simple MSBuild project builder.
</summary>
</member>
<member name="T:IntelliFactory.Build.MSBuild">
<summary>
 Support for running MSBuild projects.
</summary>
</member>
<member name="M:IntelliFactory.Build.Mercurial.InferTag(System.String)">
<summary>
 Given a Mercurial checkout (a directory containing a `.hg` subfolder),
 infers the current Mercurial tag. If the current directory state is not
 tagged, returns the long hash instead. Returns `None` if `.hg` is not found.
 This method does not call Mercurial but analyzes the `.hg` folder directly.
</summary>
</member>
<member name="T:IntelliFactory.Build.Mercurial">
<summary>
 Utilities for working with Mercurial (Hg) repositories.
</summary>
</member>
<member name="M:IntelliFactory.Build.Rebuilds.RebuildProblem.Decide">
<summary>
 Decides the problem.
</summary>
</member>
<member name="M:IntelliFactory.Build.Rebuilds.RebuildProblem.Create(IntelliFactory.Core.Parametrization.IParametric)">
<summary>
 Constructor function.
</summary>
</member>
<member name="M:IntelliFactory.Build.Rebuilds.RebuildProblem.AddOutputPaths(System.Collections.Generic.IEnumerable{System.IO.FileInfo})">
<summary>
 Adds output paths to consider.
</summary>
</member>
<member name="M:IntelliFactory.Build.Rebuilds.RebuildProblem.AddInputPaths(System.Collections.Generic.IEnumerable{System.IO.FileInfo})">
<summary>
 Adds input paths to consider.
</summary>
</member>
<member name="T:IntelliFactory.Build.Rebuilds.RebuildProblem">
<summary>
 Defines a rebuild problem.
</summary>
</member>
<member name="P:IntelliFactory.Build.Rebuilds.RebuildDecision.Reason">
<summary>
 Readable reason for the decision.
</summary>
</member>
<member name="P:IntelliFactory.Build.Rebuilds.RebuildDecision.IsStale">
<summary>
 The project should be rebuilt.
</summary>
</member>
<member name="M:IntelliFactory.Build.Rebuilds.RebuildDecision.Touch">
<summary>
 Touch all output files.
</summary>
</member>
<member name="T:IntelliFactory.Build.Rebuilds.RebuildDecision">
<summary>
 The response from the rebuild decision system.
</summary>
</member>
<member name="T:IntelliFactory.Build.Rebuilds">
<summary>
 Facilities for making optimal rebuild decisions.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:IntelliFactory.Build.ReferenceConfig">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:IntelliFactory.Build.Utilities">

</member>
<member name="T:IntelliFactory.Build.VSTemplates">
<summary>
 Provides a facility to generate VisualStudio template archive files.
 These typically have a `.zip` extension and contain `.vstemplate` XML manifests.
 Quickstart: use the static methods on `Archive` to construct
 an in-memory `.zip` representation you can then manipulate.
</summary>
</member>
<member name="T:IntelliFactory.Build.VsixExtensions">
<summary>
 Provides a facility to generate VisualStudio extension `.vsix` files
 using the 2010 VSIX format compatible with VisualStudio 2010 and VisualStudio 2012,
 see &lt;http://msdn.microsoft.com/en-us/library/vstudio/dd393754(v=vs.100).aspx&gt;
 Quickstart: use the static methods on `VsixFile` to construct
 an in-memory `.vsix` representation you can then manipulate.
</summary>
</member>
<member name="T:IntelliFactory.Build.VsixPackages">
<summary>
 Declares common types for VSIX VisualStudio extensions and VSTemplate packages.
</summary>
</member>
<member name="P:IntelliFactory.Build.WebSharperConfig.WebSharperHtmlDirectory">
<summary>
 Path to the HTML output directory.
</summary>
</member>
<member name="P:IntelliFactory.Build.WebSharperConfig.WebSharperHome">
<summary>
 Path to the directory containing WebSharper tools.
</summary>
</member>
<member name="P:IntelliFactory.Build.WebSharperConfig.WebSharperVersion">
<summary>
 Version of WebSharper to use for resolution.
</summary>
</member>
<member name="T:IntelliFactory.Build.WebSharperConfig">

</member>
</members>
</doc>
